"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utxos_1 = require("src/apis/avm/utxos");
const create_hash_1 = __importDefault(require("create-hash"));
const bintools_1 = __importDefault(require("src/utils/bintools"));
const bn_js_1 = __importDefault(require("bn.js"));
const buffer_1 = require("buffer/");
const outputs_1 = require("src/apis/avm/outputs");
const constants_1 = require("src/apis/avm/constants");
const ops_1 = require("src/apis/avm/ops");
const output_1 = require("src/common/output");
const ops_2 = require("src/apis/avm/ops");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
describe('Operations', () => {
    const codecID_zero = 0;
    const codecID_one = 1;
    const assetID = "8a5d2d32e68bc50036e4d086044617fe4a0a0296b274999ba568ea92da46d533";
    const assetIDBuff = buffer_1.Buffer.from(assetID, "hex");
    const addrs = [
        bintools.cb58Decode("B6D4v1VtPYLbiUvYXtW4Px8oE9imC2vGW"),
        bintools.cb58Decode("P5wdRuZeaDt28eHMP5S3w9ZdoBfo7wuzF"),
        bintools.cb58Decode("6Y3kysjF9jnHnYkdS9yGAuoHyae2eNmeV")
    ].sort();
    const locktime = new bn_js_1.default(54321);
    const payload = buffer_1.Buffer.alloc(1024);
    payload.write("All you Trekkies and TV addicts, Don't mean to diss don't mean to bring static.", 0, 1024, "utf8");
    describe('NFTMintOperation', () => {
        test('SelectOperationClass', () => {
            const goodop = new ops_1.NFTMintOperation(0, buffer_1.Buffer.from(""), []);
            const operation = ops_1.SelectOperationClass(goodop.getOperationID());
            expect(operation).toBeInstanceOf(ops_1.NFTMintOperation);
            expect(() => {
                ops_1.SelectOperationClass(99);
            }).toThrow("Error - SelectOperationClass: unknown opid");
        });
        test('comparator', () => {
            const outputOwners = [];
            outputOwners.push(new output_1.OutputOwners(addrs, locktime, 1));
            const op1 = new ops_1.NFTMintOperation(1, payload, outputOwners);
            const op2 = new ops_1.NFTMintOperation(2, payload, outputOwners);
            const op3 = new ops_1.NFTMintOperation(0, payload, outputOwners);
            const cmp = ops_1.NFTMintOperation.comparator();
            expect(cmp(op1, op1)).toBe(0);
            expect(cmp(op2, op2)).toBe(0);
            expect(cmp(op3, op3)).toBe(0);
            expect(cmp(op1, op2)).toBe(-1);
            expect(cmp(op1, op3)).toBe(1);
        });
        test('Functionality', () => {
            const outputOwners = [];
            outputOwners.push(new output_1.OutputOwners(addrs, locktime, 1));
            const op = new ops_1.NFTMintOperation(0, payload, outputOwners);
            expect(op.getOperationID()).toBe(constants_1.AVMConstants.NFTMINTOPID);
            expect(op.getOutputOwners().toString()).toBe(outputOwners.toString());
            const opcopy = new ops_1.NFTMintOperation();
            const opb = op.toBuffer();
            opcopy.fromBuffer(opb);
            expect(opcopy.toString()).toBe(op.toString());
        });
        test("NFTMintOperation codecIDs", () => {
            const outputOwners = [];
            outputOwners.push(new output_1.OutputOwners(addrs, locktime, 1));
            const nftMintOperation = new ops_1.NFTMintOperation(0, payload, outputOwners);
            expect(nftMintOperation.getCodecID()).toBe(codecID_zero);
            expect(nftMintOperation.getOperationID()).toBe(constants_1.AVMConstants.NFTMINTOPID);
            nftMintOperation.setCodecID(codecID_one);
            expect(nftMintOperation.getCodecID()).toBe(codecID_one);
            expect(nftMintOperation.getOperationID()).toBe(constants_1.AVMConstants.NFTMINTOPID_CODECONE);
            nftMintOperation.setCodecID(codecID_zero);
            expect(nftMintOperation.getCodecID()).toBe(codecID_zero);
            expect(nftMintOperation.getOperationID()).toBe(constants_1.AVMConstants.NFTMINTOPID);
        });
        test("Invalid NFTMintOperation codecID", () => {
            const outputOwners = [];
            outputOwners.push(new output_1.OutputOwners(addrs, locktime, 1));
            const nftMintOperation = new ops_1.NFTMintOperation(0, payload, outputOwners);
            expect(() => {
                nftMintOperation.setCodecID(2);
            }).toThrow("Error - NFTMintOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.");
        });
    });
    describe('NFTTransferOperation', () => {
        test('SelectOperationClass', () => {
            const nout = new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1);
            const goodop = new ops_1.NFTTransferOperation(nout);
            const operation = ops_1.SelectOperationClass(goodop.getOperationID());
            expect(operation).toBeInstanceOf(ops_1.NFTTransferOperation);
            expect(() => {
                ops_1.SelectOperationClass(99);
            }).toThrow("Error - SelectOperationClass: unknown opid");
        });
        test('comparator', () => {
            const op1 = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1));
            const op2 = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(1001, payload, addrs, locktime, 1));
            const op3 = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(999, payload, addrs, locktime, 1));
            const cmp = ops_1.NFTTransferOperation.comparator();
            expect(cmp(op1, op1)).toBe(0);
            expect(cmp(op2, op2)).toBe(0);
            expect(cmp(op3, op3)).toBe(0);
            expect(cmp(op1, op2)).toBe(-1);
            expect(cmp(op1, op3)).toBe(1);
        });
        test('Functionality', () => {
            const nout = new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1);
            const op = new ops_1.NFTTransferOperation(nout);
            expect(op.getOperationID()).toBe(constants_1.AVMConstants.NFTXFEROPID);
            expect(op.getOutput().toString()).toBe(nout.toString());
            const opcopy = new ops_1.NFTTransferOperation();
            opcopy.fromBuffer(op.toBuffer());
            expect(opcopy.toString()).toBe(op.toString());
            op.addSignatureIdx(0, addrs[0]);
            const sigidx = op.getSigIdxs();
            expect(sigidx[0].getSource().toString("hex")).toBe(addrs[0].toString("hex"));
            opcopy.fromBuffer(op.toBuffer());
            expect(opcopy.toString()).toBe(op.toString());
        });
        test("NFTTransferOperation codecIDs", () => {
            const nftTransferOperation = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1));
            expect(nftTransferOperation.getCodecID()).toBe(codecID_zero);
            expect(nftTransferOperation.getOperationID()).toBe(constants_1.AVMConstants.NFTXFEROPID);
            nftTransferOperation.setCodecID(codecID_one);
            expect(nftTransferOperation.getCodecID()).toBe(codecID_one);
            expect(nftTransferOperation.getOperationID()).toBe(constants_1.AVMConstants.NFTXFEROPID_CODECONE);
            nftTransferOperation.setCodecID(codecID_zero);
            expect(nftTransferOperation.getCodecID()).toBe(codecID_zero);
            expect(nftTransferOperation.getOperationID()).toBe(constants_1.AVMConstants.NFTXFEROPID);
        });
        test("Invalid NFTTransferOperation codecID", () => {
            const nftTransferOperation = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1));
            expect(() => {
                nftTransferOperation.setCodecID(2);
            }).toThrow("Error - NFTTransferOperation.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.");
        });
    });
    test('TransferableOperation', () => {
        const nout = new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1);
        const op = new ops_1.NFTTransferOperation(nout);
        const nfttxid = buffer_1.Buffer.from(create_hash_1.default("sha256").update(bintools.fromBNToBuffer(new bn_js_1.default(1000), 32)).digest());
        const nftoutputidx = buffer_1.Buffer.from(bintools.fromBNToBuffer(new bn_js_1.default(1000), 4));
        const nftutxo = new utxos_1.UTXO(constants_1.AVMConstants.LATESTCODEC, nfttxid, nftoutputidx, assetIDBuff, nout);
        const xferop = new ops_1.TransferableOperation(assetIDBuff, [nftutxo.getUTXOID()], op);
        const xferop2 = new ops_1.TransferableOperation(assetIDBuff, [buffer_1.Buffer.concat([nfttxid, nftoutputidx])], op);
        const uid = new ops_2.UTXOID();
        uid.fromString(nftutxo.getUTXOID());
        const xferop3 = new ops_1.TransferableOperation(assetIDBuff, [uid], op);
        expect(xferop.getAssetID().toString("hex")).toBe(assetID);
        const utxoiddeserialized = bintools.cb58Decode(xferop.getUTXOIDs()[0].toString());
        expect(bintools.bufferToB58(utxoiddeserialized)).toBe(nftutxo.getUTXOID());
        expect(xferop.getOperation().toString()).toBe(op.toString());
        const opcopy = new ops_1.TransferableOperation();
        opcopy.fromBuffer(xferop.toBuffer());
        expect(opcopy.toString()).toBe(xferop.toString());
        expect(xferop2.toBuffer().toString("hex")).toBe(xferop.toBuffer().toString('hex'));
        expect(xferop3.toBuffer().toString("hex")).toBe(xferop.toBuffer().toString('hex'));
    });
});
//# sourceMappingURL=data:application/json;base64,