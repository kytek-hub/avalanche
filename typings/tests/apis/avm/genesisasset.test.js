"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const outputs_1 = require("src/apis/avm/outputs");
const initialstates_1 = require("src/apis/avm/initialstates");
const avm_1 = require("src/apis/avm");
const utils_1 = require("src/utils");
/**
 * @ignore
 */
const serialization = utils_1.Serialization.getInstance();
describe("AVM", () => {
    test("GenesisAsset", () => {
        const m = "2Zc54v4ek37TEwu4LiV3j41PUMRd6acDDU3ZCVSxE7X";
        const mHex = "66726f6d20736e6f77666c616b6520746f206176616c616e636865";
        const blockchainIDHex = "0000000000000000000000000000000000000000000000000000000000000000";
        const hex = "hex";
        const cb58 = "cb58";
        const bech32 = "bech32";
        const memo = serialization.typeToBuffer(m, cb58);
        const amount = new bn_js_1.default(0);
        const address = "X-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u";
        const addressBuf = serialization.typeToBuffer(address, bech32);
        const threshold = 1;
        const locktime = new bn_js_1.default(0);
        const assetAlias = "asset1";
        const name = "asset1";
        const symbol = "MFCA";
        const denomination = 1;
        const outs = [];
        const ins = [];
        const vcapSecpOutput = new outputs_1.SECPTransferOutput(amount, [addressBuf], locktime, threshold);
        const initialStates = new initialstates_1.InitialStates();
        initialStates.addOutput(vcapSecpOutput);
        const genesisAsset = new avm_1.GenesisAsset(assetAlias, name, symbol, denomination, initialStates, memo);
        const genesisAsset2 = new avm_1.GenesisAsset();
        genesisAsset2.fromBuffer(genesisAsset.toBuffer());
        expect(genesisAsset.toBuffer().toString("hex")).toBe(genesisAsset2.toBuffer().toString("hex"));
        expect(genesisAsset.getTypeName()).toBe("GenesisAsset");
        expect(genesisAsset.getTypeID()).toBeUndefined();
        expect(genesisAsset.getCodecID()).toBeUndefined();
        expect(genesisAsset.getNetworkID()).toBe(utils_1.DefaultNetworkID);
        expect(genesisAsset.getName()).toBe(name);
        expect(genesisAsset.getAssetAlias()).toBe(assetAlias);
        expect(genesisAsset.getSymbol()).toBe(symbol);
        expect(genesisAsset.getDenomination()).toBe(denomination);
        expect(genesisAsset.getBlockchainID().toString(hex)).toBe(blockchainIDHex);
        expect(genesisAsset.getIns()).toEqual(outs);
        expect(genesisAsset.getOuts()).toEqual(ins);
        expect(genesisAsset.getInitialStates()).toStrictEqual(initialStates);
        expect(genesisAsset.getMemo().toString(hex)).toBe(mHex);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXNpc2Fzc2V0LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0cy9hcGlzL2F2bS9nZW5lc2lzYXNzZXQudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtEQUFzQjtBQUV0QixrREFBNkU7QUFDN0UsOERBQTBEO0FBQzFELHNDQUE4RDtBQUM5RCxxQ0FBK0Y7QUFFL0Y7O0dBRUc7QUFDSCxNQUFNLGFBQWEsR0FBa0IscUJBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUNoRSxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQVMsRUFBRTtJQUN6QixJQUFJLENBQUMsY0FBYyxFQUFFLEdBQVMsRUFBRTtRQUM5QixNQUFNLENBQUMsR0FBVyw2Q0FBNkMsQ0FBQTtRQUMvRCxNQUFNLElBQUksR0FBVyx3REFBd0QsQ0FBQTtRQUM3RSxNQUFNLGVBQWUsR0FBVyxrRUFBa0UsQ0FBQTtRQUNsRyxNQUFNLEdBQUcsR0FBdUIsS0FBSyxDQUFBO1FBQ3JDLE1BQU0sSUFBSSxHQUFtQixNQUFNLENBQUE7UUFDbkMsTUFBTSxNQUFNLEdBQW1CLFFBQVEsQ0FBQTtRQUN2QyxNQUFNLElBQUksR0FBVyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUN4RCxNQUFNLE1BQU0sR0FBTyxJQUFJLGVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUM1QixNQUFNLE9BQU8sR0FBVyxnREFBZ0QsQ0FBQTtRQUN4RSxNQUFNLFVBQVUsR0FBVyxhQUFhLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN0RSxNQUFNLFNBQVMsR0FBVyxDQUFDLENBQUE7UUFDM0IsTUFBTSxRQUFRLEdBQU8sSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDOUIsTUFBTSxVQUFVLEdBQVcsUUFBUSxDQUFBO1FBQ25DLE1BQU0sSUFBSSxHQUFXLFFBQVEsQ0FBQTtRQUM3QixNQUFNLE1BQU0sR0FBVyxNQUFNLENBQUE7UUFDN0IsTUFBTSxZQUFZLEdBQVcsQ0FBQyxDQUFBO1FBQzlCLE1BQU0sSUFBSSxHQUF5QixFQUFFLENBQUE7UUFDckMsTUFBTSxHQUFHLEdBQXdCLEVBQUUsQ0FBQTtRQUNuQyxNQUFNLGNBQWMsR0FBRyxJQUFJLDRCQUFrQixDQUFDLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUN4RixNQUFNLGFBQWEsR0FBa0IsSUFBSSw2QkFBYSxFQUFFLENBQUE7UUFDeEQsYUFBYSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUN2QyxNQUFNLFlBQVksR0FBaUIsSUFBSSxrQkFBWSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDaEgsTUFBTSxhQUFhLEdBQWlCLElBQUksa0JBQVksRUFBRSxDQUFBO1FBQ3RELGFBQWEsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFDakQsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO1FBQzlGLE1BQU0sQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDdkQsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQ2hELE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQTtRQUNqRCxNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUFnQixDQUFDLENBQUE7UUFDMUQsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN6QyxNQUFNLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3JELE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDN0MsTUFBTSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUN6RCxNQUFNLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQTtRQUMxRSxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzNDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDM0MsTUFBTSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQ3BFLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3pELENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQk4gZnJvbSBcImJuLmpzXCJcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcbmltcG9ydCB7IFNFQ1BUcmFuc2Zlck91dHB1dCwgVHJhbnNmZXJhYmxlT3V0cHV0IH0gZnJvbSBcInNyYy9hcGlzL2F2bS9vdXRwdXRzXCJcbmltcG9ydCB7IEluaXRpYWxTdGF0ZXMgfSBmcm9tIFwic3JjL2FwaXMvYXZtL2luaXRpYWxzdGF0ZXNcIlxuaW1wb3J0IHsgR2VuZXNpc0Fzc2V0LCBUcmFuc2ZlcmFibGVJbnB1dCB9IGZyb20gXCJzcmMvYXBpcy9hdm1cIlxuaW1wb3J0IHsgRGVmYXVsdE5ldHdvcmtJRCwgU2VyaWFsaXphdGlvbiwgU2VyaWFsaXplZEVuY29kaW5nLCBTZXJpYWxpemVkVHlwZSB9IGZyb20gXCJzcmMvdXRpbHNcIlxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3Qgc2VyaWFsaXphdGlvbjogU2VyaWFsaXphdGlvbiA9IFNlcmlhbGl6YXRpb24uZ2V0SW5zdGFuY2UoKVxuZGVzY3JpYmUoXCJBVk1cIiwgKCk6IHZvaWQgPT4ge1xuICB0ZXN0KFwiR2VuZXNpc0Fzc2V0XCIsICgpOiB2b2lkID0+IHtcbiAgICBjb25zdCBtOiBzdHJpbmcgPSBcIjJaYzU0djRlazM3VEV3dTRMaVYzajQxUFVNUmQ2YWNERFUzWkNWU3hFN1hcIlxuICAgIGNvbnN0IG1IZXg6IHN0cmluZyA9IFwiNjY3MjZmNmQyMDczNmU2Zjc3NjY2YzYxNmI2NTIwNzQ2ZjIwNjE3NjYxNmM2MTZlNjM2ODY1XCJcbiAgICBjb25zdCBibG9ja2NoYWluSURIZXg6IHN0cmluZyA9IFwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiXG4gICAgY29uc3QgaGV4OiBTZXJpYWxpemVkRW5jb2RpbmcgPSBcImhleFwiXG4gICAgY29uc3QgY2I1ODogU2VyaWFsaXplZFR5cGUgPSBcImNiNThcIlxuICAgIGNvbnN0IGJlY2gzMjogU2VyaWFsaXplZFR5cGUgPSBcImJlY2gzMlwiXG4gICAgY29uc3QgbWVtbzogQnVmZmVyID0gc2VyaWFsaXphdGlvbi50eXBlVG9CdWZmZXIobSwgY2I1OClcbiAgICBjb25zdCBhbW91bnQ6IEJOID0gbmV3IEJOKDApXG4gICAgY29uc3QgYWRkcmVzczogc3RyaW5nID0gXCJYLWxvY2FsMThqbWE4cHB3M25oeDVyNGFwOGNsYXp6MGRwczdydjV1MDB6OTZ1XCJcbiAgICBjb25zdCBhZGRyZXNzQnVmOiBCdWZmZXIgPSBzZXJpYWxpemF0aW9uLnR5cGVUb0J1ZmZlcihhZGRyZXNzLCBiZWNoMzIpXG4gICAgY29uc3QgdGhyZXNob2xkOiBudW1iZXIgPSAxXG4gICAgY29uc3QgbG9ja3RpbWU6IEJOID0gbmV3IEJOKDApXG4gICAgY29uc3QgYXNzZXRBbGlhczogc3RyaW5nID0gXCJhc3NldDFcIlxuICAgIGNvbnN0IG5hbWU6IHN0cmluZyA9IFwiYXNzZXQxXCJcbiAgICBjb25zdCBzeW1ib2w6IHN0cmluZyA9IFwiTUZDQVwiXG4gICAgY29uc3QgZGVub21pbmF0aW9uOiBudW1iZXIgPSAxXG4gICAgY29uc3Qgb3V0czogVHJhbnNmZXJhYmxlT3V0cHV0W10gPSBbXVxuICAgIGNvbnN0IGluczogVHJhbnNmZXJhYmxlSW5wdXRbXSA9IFtdXG4gICAgY29uc3QgdmNhcFNlY3BPdXRwdXQgPSBuZXcgU0VDUFRyYW5zZmVyT3V0cHV0KGFtb3VudCwgW2FkZHJlc3NCdWZdLCBsb2NrdGltZSwgdGhyZXNob2xkKVxuICAgIGNvbnN0IGluaXRpYWxTdGF0ZXM6IEluaXRpYWxTdGF0ZXMgPSBuZXcgSW5pdGlhbFN0YXRlcygpXG4gICAgaW5pdGlhbFN0YXRlcy5hZGRPdXRwdXQodmNhcFNlY3BPdXRwdXQpXG4gICAgY29uc3QgZ2VuZXNpc0Fzc2V0OiBHZW5lc2lzQXNzZXQgPSBuZXcgR2VuZXNpc0Fzc2V0KGFzc2V0QWxpYXMsIG5hbWUsIHN5bWJvbCwgZGVub21pbmF0aW9uLCBpbml0aWFsU3RhdGVzLCBtZW1vKVxuICAgIGNvbnN0IGdlbmVzaXNBc3NldDI6IEdlbmVzaXNBc3NldCA9IG5ldyBHZW5lc2lzQXNzZXQoKVxuICAgIGdlbmVzaXNBc3NldDIuZnJvbUJ1ZmZlcihnZW5lc2lzQXNzZXQudG9CdWZmZXIoKSlcbiAgICBleHBlY3QoZ2VuZXNpc0Fzc2V0LnRvQnVmZmVyKCkudG9TdHJpbmcoXCJoZXhcIikpLnRvQmUoZ2VuZXNpc0Fzc2V0Mi50b0J1ZmZlcigpLnRvU3RyaW5nKFwiaGV4XCIpKVxuICAgIGV4cGVjdChnZW5lc2lzQXNzZXQuZ2V0VHlwZU5hbWUoKSkudG9CZShcIkdlbmVzaXNBc3NldFwiKVxuICAgIGV4cGVjdChnZW5lc2lzQXNzZXQuZ2V0VHlwZUlEKCkpLnRvQmVVbmRlZmluZWQoKVxuICAgIGV4cGVjdChnZW5lc2lzQXNzZXQuZ2V0Q29kZWNJRCgpKS50b0JlVW5kZWZpbmVkKClcbiAgICBleHBlY3QoZ2VuZXNpc0Fzc2V0LmdldE5ldHdvcmtJRCgpKS50b0JlKERlZmF1bHROZXR3b3JrSUQpXG4gICAgZXhwZWN0KGdlbmVzaXNBc3NldC5nZXROYW1lKCkpLnRvQmUobmFtZSlcbiAgICBleHBlY3QoZ2VuZXNpc0Fzc2V0LmdldEFzc2V0QWxpYXMoKSkudG9CZShhc3NldEFsaWFzKVxuICAgIGV4cGVjdChnZW5lc2lzQXNzZXQuZ2V0U3ltYm9sKCkpLnRvQmUoc3ltYm9sKVxuICAgIGV4cGVjdChnZW5lc2lzQXNzZXQuZ2V0RGVub21pbmF0aW9uKCkpLnRvQmUoZGVub21pbmF0aW9uKVxuICAgIGV4cGVjdChnZW5lc2lzQXNzZXQuZ2V0QmxvY2tjaGFpbklEKCkudG9TdHJpbmcoaGV4KSkudG9CZShibG9ja2NoYWluSURIZXgpXG4gICAgZXhwZWN0KGdlbmVzaXNBc3NldC5nZXRJbnMoKSkudG9FcXVhbChvdXRzKVxuICAgIGV4cGVjdChnZW5lc2lzQXNzZXQuZ2V0T3V0cygpKS50b0VxdWFsKGlucylcbiAgICBleHBlY3QoZ2VuZXNpc0Fzc2V0LmdldEluaXRpYWxTdGF0ZXMoKSkudG9TdHJpY3RFcXVhbChpbml0aWFsU3RhdGVzKVxuICAgIGV4cGVjdChnZW5lc2lzQXNzZXQuZ2V0TWVtbygpLnRvU3RyaW5nKGhleCkpLnRvQmUobUhleClcbiAgfSlcbn0pXG4iXX0=