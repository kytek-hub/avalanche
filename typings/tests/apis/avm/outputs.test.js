"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const bintools_1 = __importDefault(require("src/utils/bintools"));
const outputs_1 = require("src/apis/avm/outputs");
const output_1 = require("src/common/output");
const outputs_2 = require("../../../src/apis/avm/outputs");
const avm_1 = require("src/apis/avm");
const bintools = bintools_1.default.getInstance();
describe('Outputs', () => {
    const codecID_zero = 0;
    const codecID_one = 1;
    describe('NFTMintOutput', () => {
        const addrs = [
            bintools.cb58Decode("B6D4v1VtPYLbiUvYXtW4Px8oE9imC2vGW"),
            bintools.cb58Decode("P5wdRuZeaDt28eHMP5S3w9ZdoBfo7wuzF"),
            bintools.cb58Decode("6Y3kysjF9jnHnYkdS9yGAuoHyae2eNmeV")
        ].sort();
        const locktime = new bn_js_1.default(54321);
        const addrpay = [addrs[0], addrs[1]];
        const fallLocktime = locktime.add(new bn_js_1.default(50));
        test('SelectOutputClass', () => {
            const goodout = new outputs_1.NFTMintOutput(0, addrpay, fallLocktime, 1);
            const outpayment = outputs_1.SelectOutputClass(goodout.getOutputID());
            expect(outpayment).toBeInstanceOf(outputs_1.NFTMintOutput);
            expect(() => {
                outputs_1.SelectOutputClass(99);
            }).toThrow("Error - SelectOutputClass: unknown outputid");
        });
        test('comparator', () => {
            const outpayment1 = new outputs_1.NFTMintOutput(1, addrs, fallLocktime, 1);
            const outpayment2 = new outputs_1.NFTMintOutput(2, addrs, fallLocktime, 1);
            const outpayment3 = new outputs_1.NFTMintOutput(0, addrs, fallLocktime, 1);
            const cmp = output_1.Output.comparator();
            expect(cmp(outpayment1, outpayment1)).toBe(0);
            expect(cmp(outpayment2, outpayment2)).toBe(0);
            expect(cmp(outpayment3, outpayment3)).toBe(0);
            expect(cmp(outpayment1, outpayment2)).toBe(-1);
            expect(cmp(outpayment1, outpayment3)).toBe(1);
        });
        test("NFTMintOutput codecIDs", () => {
            const nftMintOutput = new outputs_1.NFTMintOutput(1, addrs, fallLocktime, 1);
            expect(nftMintOutput.getCodecID()).toBe(codecID_zero);
            expect(nftMintOutput.getOutputID()).toBe(avm_1.AVMConstants.NFTMINTOUTPUTID);
            nftMintOutput.setCodecID(codecID_one);
            expect(nftMintOutput.getCodecID()).toBe(codecID_one);
            expect(nftMintOutput.getOutputID()).toBe(avm_1.AVMConstants.NFTMINTOUTPUTID_CODECONE);
            nftMintOutput.setCodecID(codecID_zero);
            expect(nftMintOutput.getCodecID()).toBe(codecID_zero);
            expect(nftMintOutput.getOutputID()).toBe(avm_1.AVMConstants.NFTMINTOUTPUTID);
        });
        test("Invalid NFTMintOutput codecID", () => {
            const nftMintOutput = new outputs_1.NFTMintOutput(1, addrs, fallLocktime, 1);
            expect(() => {
                nftMintOutput.setCodecID(2);
            }).toThrow("Error - NFTMintOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.");
        });
        test('Functionality', () => {
            const out = new outputs_1.NFTMintOutput(0, addrs, fallLocktime, 3);
            expect(out.getOutputID()).toBe(10);
            expect(JSON.stringify(out.getAddresses().sort())).toStrictEqual(JSON.stringify(addrs.sort()));
            expect(out.getThreshold()).toBe(3);
            // expect(out.getLocktime().toNumber()).toBe(locktime.toNumber())
            const r = out.getAddressIdx(addrs[2]);
            expect(out.getAddress(r)).toStrictEqual(addrs[2]);
            expect(() => {
                out.getAddress(400);
            }).toThrow();
            const b = out.toBuffer();
            expect(out.toString()).toBe(bintools.bufferToB58(b));
            const s = out.getSpenders(addrs);
            expect(JSON.stringify(s.sort())).toBe(JSON.stringify(addrs.sort()));
            const m1 = out.meetsThreshold([addrs[0]]);
            expect(m1).toBe(false);
            const m2 = out.meetsThreshold(addrs, new bn_js_1.default(100));
            expect(m2).toBe(false);
            const m3 = out.meetsThreshold(addrs);
            expect(m3).toBe(true);
            const m4 = out.meetsThreshold(addrs, locktime.add(new bn_js_1.default(100)));
            expect(m4).toBe(true);
        });
    });
    describe('SECPTransferOutput', () => {
        const addrs = [
            bintools.cb58Decode("B6D4v1VtPYLbiUvYXtW4Px8oE9imC2vGW"),
            bintools.cb58Decode("P5wdRuZeaDt28eHMP5S3w9ZdoBfo7wuzF"),
            bintools.cb58Decode("6Y3kysjF9jnHnYkdS9yGAuoHyae2eNmeV")
        ].sort();
        const locktime = new bn_js_1.default(54321);
        const addrpay = [addrs[0], addrs[1]];
        const fallLocktime = locktime.add(new bn_js_1.default(50));
        test('SelectOutputClass', () => {
            const goodout = new outputs_1.SECPTransferOutput(new bn_js_1.default(2600), addrpay, fallLocktime, 1);
            const outpayment = outputs_1.SelectOutputClass(goodout.getOutputID());
            expect(outpayment).toBeInstanceOf(outputs_1.SECPTransferOutput);
            expect(() => {
                outputs_1.SelectOutputClass(99);
            }).toThrow("Error - SelectOutputClass: unknown outputid");
        });
        test('comparator', () => {
            const outpayment1 = new outputs_1.SECPTransferOutput(new bn_js_1.default(10000), addrs, locktime, 3);
            const outpayment2 = new outputs_1.SECPTransferOutput(new bn_js_1.default(10001), addrs, locktime, 3);
            const outpayment3 = new outputs_1.SECPTransferOutput(new bn_js_1.default(9999), addrs, locktime, 3);
            const cmp = output_1.Output.comparator();
            expect(cmp(outpayment1, outpayment1)).toBe(0);
            expect(cmp(outpayment2, outpayment2)).toBe(0);
            expect(cmp(outpayment3, outpayment3)).toBe(0);
            expect(cmp(outpayment1, outpayment2)).toBe(-1);
            expect(cmp(outpayment1, outpayment3)).toBe(1);
        });
        test('SECPTransferOutput', () => {
            const out = new outputs_1.SECPTransferOutput(new bn_js_1.default(10000), addrs, locktime, 3);
            expect(out.getOutputID()).toBe(7);
            expect(JSON.stringify(out.getAddresses().sort())).toStrictEqual(JSON.stringify(addrs.sort()));
            expect(out.getThreshold()).toBe(3);
            expect(out.getLocktime().toNumber()).toBe(locktime.toNumber());
            const r = out.getAddressIdx(addrs[2]);
            expect(out.getAddress(r)).toStrictEqual(addrs[2]);
            expect(() => {
                out.getAddress(400);
            }).toThrow();
            expect(out.getAmount().toNumber()).toBe(10000);
            const b = out.toBuffer();
            expect(out.toString()).toBe(bintools.bufferToB58(b));
            const s = out.getSpenders(addrs);
            expect(JSON.stringify(s.sort())).toBe(JSON.stringify(addrs.sort()));
            const m1 = out.meetsThreshold([addrs[0]]);
            expect(m1).toBe(false);
            const m2 = out.meetsThreshold(addrs, new bn_js_1.default(100));
            expect(m2).toBe(false);
            const m3 = out.meetsThreshold(addrs);
            expect(m3).toBe(true);
            const m4 = out.meetsThreshold(addrs, locktime.add(new bn_js_1.default(100)));
            expect(m4).toBe(true);
        });
        test("SECPTransferOutput codecIDs", () => {
            const secPTransferOutput = new outputs_1.SECPTransferOutput(new bn_js_1.default(10000), addrs, locktime, 3);
            expect(secPTransferOutput.getCodecID()).toBe(codecID_zero);
            expect(secPTransferOutput.getOutputID()).toBe(avm_1.AVMConstants.SECPXFEROUTPUTID);
            secPTransferOutput.setCodecID(codecID_one);
            expect(secPTransferOutput.getCodecID()).toBe(codecID_one);
            expect(secPTransferOutput.getOutputID()).toBe(avm_1.AVMConstants.SECPXFEROUTPUTID_CODECONE);
            secPTransferOutput.setCodecID(codecID_zero);
            expect(secPTransferOutput.getCodecID()).toBe(codecID_zero);
            expect(secPTransferOutput.getOutputID()).toBe(avm_1.AVMConstants.SECPXFEROUTPUTID);
        });
        test("Invalid SECPTransferOutput codecID", () => {
            const secPTransferOutput = new outputs_1.SECPTransferOutput(new bn_js_1.default(10000), addrs, locktime, 3);
            expect(() => {
                secPTransferOutput.setCodecID(2);
            }).toThrow("Error - SECPTransferOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.");
        });
        test('SECPMintOutput', () => {
            const out = new outputs_2.SECPMintOutput(addrs, locktime, 3);
            expect(out.getOutputID()).toBe(6);
            expect(JSON.stringify(out.getAddresses().sort())).toStrictEqual(JSON.stringify(addrs.sort()));
            expect(out.getThreshold()).toBe(3);
            expect(out.getLocktime().toNumber()).toBe(locktime.toNumber());
            const r = out.getAddressIdx(addrs[2]);
            expect(out.getAddress(r)).toStrictEqual(addrs[2]);
            expect(() => {
                out.getAddress(400);
            }).toThrow();
            const b = out.toBuffer();
            expect(out.toString()).toBe(bintools.bufferToB58(b));
            const s = out.getSpenders(addrs);
            expect(JSON.stringify(s.sort())).toBe(JSON.stringify(addrs.sort()));
            const m1 = out.meetsThreshold([addrs[0]]);
            expect(m1).toBe(false);
            const m2 = out.meetsThreshold(addrs, new bn_js_1.default(100));
            expect(m2).toBe(false);
            const m3 = out.meetsThreshold(addrs);
            expect(m3).toBe(true);
            const m4 = out.meetsThreshold(addrs, locktime.add(new bn_js_1.default(100)));
            expect(m4).toBe(true);
        });
        test("SECPMintOutput codecIDs", () => {
            const secpMintOutput = new outputs_2.SECPMintOutput(addrs, locktime, 3);
            expect(secpMintOutput.getCodecID()).toBe(codecID_zero);
            expect(secpMintOutput.getOutputID()).toBe(avm_1.AVMConstants.SECPMINTOUTPUTID);
            secpMintOutput.setCodecID(codecID_one);
            expect(secpMintOutput.getCodecID()).toBe(codecID_one);
            expect(secpMintOutput.getOutputID()).toBe(avm_1.AVMConstants.SECPMINTOUTPUTID_CODECONE);
            secpMintOutput.setCodecID(codecID_zero);
            expect(secpMintOutput.getCodecID()).toBe(codecID_zero);
            expect(secpMintOutput.getOutputID()).toBe(avm_1.AVMConstants.SECPMINTOUTPUTID);
        });
        test("Invalid SECPMintOutput codecID", () => {
            const secpMintOutput = new outputs_2.SECPMintOutput(addrs, locktime, 3);
            expect(() => {
                secpMintOutput.setCodecID(2);
            }).toThrow("Error - SECPMintOutput.setCodecID: invalid codecID. Valid codecIDs are 0 and 1.");
        });
    });
});
//# sourceMappingURL=data:application/json;base64,